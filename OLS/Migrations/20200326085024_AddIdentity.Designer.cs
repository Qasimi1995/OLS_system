// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OLS.Models;

namespace OLS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200326085024_AddIdentity")]
    partial class AddIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OLS.Models.ApplicationStatus", b =>
                {
                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnName("ApplicationStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationStatusTypeId")
                        .HasColumnName("ApplicationStatusTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationStatusId");

                    b.HasIndex("ApplicationStatusTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("ApplicationStatus");
                });

            modelBuilder.Entity("OLS.Models.ContactDetails", b =>
                {
                    b.Property<Guid>("ContactDetailId")
                        .HasColumnName("ContactDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactMechanismTypeId")
                        .HasColumnName("ContactMechanismTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartyId")
                        .HasColumnName("PartyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ContactDetailId")
                        .HasName("PK_ContactDetails_1");

                    b.HasIndex("ContactMechanismTypeId");

                    b.HasIndex("PartyId");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasName("UniqueContactDetail")
                        .HasFilter("[Value] IS NOT NULL");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("OLS.Models.LicensePayment", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnName("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecieptNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolId");

                    b.ToTable("LicensePayment");
                });

            modelBuilder.Entity("OLS.Models.Party", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnName("PartyID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartyId");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("OLS.Models.PartyAddress", b =>
                {
                    b.Property<Guid>("PartyAddressId")
                        .HasColumnName("PartyAddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressTypeId")
                        .HasColumnName("AddressTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnName("DistrictID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartyId")
                        .HasColumnName("PartyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("ProvinceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VillageNahiaId")
                        .HasColumnName("VillageNahiaID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartyAddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PartyId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("VillageNahiaId");

                    b.ToTable("PartyAddress");
                });

            modelBuilder.Entity("OLS.Models.PartyDocument", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnName("PartyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocCategoryId")
                        .HasColumnName("DocCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocTypeId")
                        .HasColumnName("DocTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocUrl")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PartyId")
                        .HasName("PK_PartyDocuments");

                    b.HasIndex("DocCategoryId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("PartyDocument");
                });

            modelBuilder.Entity("OLS.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnName("PersonID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Eduservice")
                        .HasColumnName("EDUService")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("GenderTypeId")
                        .HasColumnName("GenderTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nidnumber")
                        .HasColumnName("NIDNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PartyRoleTypeId")
                        .HasColumnName("PartyRoleTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("Nidnumber")
                        .IsUnique()
                        .HasName("UniquieNIDNumber")
                        .HasFilter("[NIDNumber] IS NOT NULL");

                    b.HasIndex("PartyRoleTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("OLS.Models.PersonEducation", b =>
                {
                    b.Property<Guid>("PersonEducationId")
                        .HasColumnName("PersonEducationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationLevelId")
                        .HasColumnName("EducationLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FacultyTypeId")
                        .HasColumnName("FacultyTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PersonId")
                        .HasColumnName("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonEducationId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("FacultyTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEducation");
                });

            modelBuilder.Entity("OLS.Models.School", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AdmissionFee")
                        .HasColumnType("money");

                    b.Property<int?>("DistanceFromPrSchool")
                        .HasColumnType("int");

                    b.Property<int?>("DistancefromPuSchool")
                        .HasColumnType("int");

                    b.Property<byte?>("HasComputerLab")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasDrinkingWater")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasFireDistinguisher")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasFirstAid")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasLibrary")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasSportFacilities")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasTeachingAids")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasTeachingBooks")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HasTransportation")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsAcceptingCommitment")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("LaboratoryMaterialTypeId")
                        .HasColumnName("LaboratoryMaterialTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Nboards")
                        .HasColumnName("NBoards")
                        .HasColumnType("int");

                    b.Property<int?>("Nbooks")
                        .HasColumnType("int");

                    b.Property<int?>("Ncomputers")
                        .HasColumnName("NComputers")
                        .HasColumnType("int");

                    b.Property<int?>("Nrooms")
                        .HasColumnName("NRooms")
                        .HasColumnType("int");

                    b.Property<int?>("NstudentDeskChair")
                        .HasColumnName("NStudentDeskChair")
                        .HasColumnType("int");

                    b.Property<int?>("NteachDeskChair")
                        .HasColumnName("NTeachDeskChair")
                        .HasColumnType("int");

                    b.Property<int?>("NwashRooms")
                        .HasColumnName("NWashRooms")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("SchoolGenderTypeId")
                        .HasColumnName("SchoolGenderTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolLevelId")
                        .HasColumnName("SchoolLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolId");

                    b.HasIndex("LaboratoryMaterialTypeId");

                    b.HasIndex("SchoolGenderTypeId");

                    b.HasIndex("SchoolLevelId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("OLS.Models.SchoolCheckList", b =>
                {
                    b.Property<Guid>("SchoolCheckListId")
                        .HasColumnName("SchoolCheckListID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolIndicatorId")
                        .HasColumnName("SchoolIndicatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolQualityLevelId")
                        .HasColumnName("SchoolQualityLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchoolCheckListId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolIndicatorId");

                    b.HasIndex("SchoolQualityLevelId");

                    b.ToTable("SchoolCheckList");
                });

            modelBuilder.Entity("OLS.Models.SchoolFinancialResource", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FundingSourceName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("SchoolBussinessTypeId")
                        .HasColumnName("SchoolBussinessTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchoolId")
                        .HasName("PK_PartyFinancialResources");

                    b.HasIndex("SchoolBussinessTypeId");

                    b.ToTable("SchoolFinancialResource");
                });

            modelBuilder.Entity("OLS.Models.SchoolLicense", b =>
                {
                    b.Property<Guid>("SchoolLicenseId")
                        .HasColumnName("SchoolLicenseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpirateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchoolLicenseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolLicense");
                });

            modelBuilder.Entity("OLS.Models.SchoolOtherExpenses", b =>
                {
                    b.Property<Guid>("OtherExpenseId")
                        .HasColumnName("OtherExpenseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ExpensePerMonth")
                        .HasColumnType("money");

                    b.Property<Guid?>("OtherExpenseTypeId")
                        .HasColumnName("OtherExpenseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OtherExpenseId")
                        .HasName("PK_OtherExpenses");

                    b.HasIndex("OtherExpenseTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolOtherExpenses");
                });

            modelBuilder.Entity("OLS.Models.SchoolStaffExpenses", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FeeAmount")
                        .HasColumnType("int");

                    b.Property<int?>("NfreeStudents")
                        .HasColumnName("NFreeStudents")
                        .HasColumnType("int");

                    b.Property<int?>("NpaidStudents")
                        .HasColumnName("NPaidStudents")
                        .HasColumnType("int");

                    b.Property<Guid?>("SchoolSubLevelId")
                        .HasColumnName("SchoolSubLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("datetime");

                    b.HasKey("SchoolId")
                        .HasName("PK_SchoolFinancialPlan");

                    b.ToTable("SchoolStaffExpenses");
                });

            modelBuilder.Entity("OLS.Models.StaffFinancialPlan", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("PartyRoleTypeId")
                        .HasColumnName("PartyRoleTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money");

                    b.HasKey("SchoolId");

                    b.HasIndex("PartyRoleTypeId");

                    b.ToTable("StaffFinancialPlan");
                });

            modelBuilder.Entity("OLS.Models.StudentEnrollmentPlan", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnName("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GenderTypeId")
                        .HasColumnName("GenderTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("NumberOfStudents")
                        .HasColumnType("int");

                    b.Property<Guid?>("SchoolSubLevelId")
                        .HasColumnName("SchoolSubLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("datetime");

                    b.HasKey("SchoolId");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("SchoolSubLevelId");

                    b.ToTable("StudentEnrollmentPlan");
                });

            modelBuilder.Entity("OLS.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OLS.Models.ZAddressType", b =>
                {
                    b.Property<Guid>("AddressTypeId")
                        .HasColumnName("AddressTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AddressTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("AddressTypeId")
                        .HasName("PK_AddressType");

                    b.ToTable("zAddressType");
                });

            modelBuilder.Entity("OLS.Models.ZApplicationStatusType", b =>
                {
                    b.Property<Guid>("ApplicationStatusTypeId")
                        .HasColumnName("ApplicationStatusTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ApplicationStatusTypeId");

                    b.ToTable("zApplicationStatusType");
                });

            modelBuilder.Entity("OLS.Models.ZContactMechanismType", b =>
                {
                    b.Property<Guid>("ContactMechanismTypeId")
                        .HasColumnName("ContactMechanismTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactMechanismTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactMechanismTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("ContactMechanismTypeId")
                        .HasName("PK_ContactMechanismType");

                    b.ToTable("zContactMechanismType");
                });

            modelBuilder.Entity("OLS.Models.ZDistrict", b =>
                {
                    b.Property<Guid>("DistrictId")
                        .HasColumnName("DistrictID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DistNaDar")
                        .HasColumnName("DIST_NA_DAR")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DistNaEng")
                        .HasColumnName("DIST_NA_ENG")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("ProvinceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DistrictId")
                        .HasName("PK_zDistricts");

                    b.HasIndex("ProvinceId");

                    b.ToTable("zDistrict");
                });

            modelBuilder.Entity("OLS.Models.ZDocCategory", b =>
                {
                    b.Property<Guid>("DocCategoryId")
                        .HasColumnName("DocCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatagoryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CatagoryNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("DocCategoryId")
                        .HasName("PK_DocCategory");

                    b.ToTable("zDocCategory");
                });

            modelBuilder.Entity("OLS.Models.ZDocType", b =>
                {
                    b.Property<Guid>("DocTypeId")
                        .HasColumnName("DocTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocCategoryId")
                        .HasColumnName("DocCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DocTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DocTypeId")
                        .HasName("PK_DocType");

                    b.HasIndex("DocCategoryId");

                    b.ToTable("zDocType");
                });

            modelBuilder.Entity("OLS.Models.ZEducationLevel", b =>
                {
                    b.Property<Guid>("EducationLevelId")
                        .HasColumnName("EducationLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EducationLevelName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EducationLevelNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("EducationLevelId")
                        .HasName("PK_EducationLevel");

                    b.ToTable("zEducationLevel");
                });

            modelBuilder.Entity("OLS.Models.ZEducationalRole", b =>
                {
                    b.Property<Guid>("PartyRoleTypeId")
                        .HasColumnName("PartyRoleTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartyRoleTypeId")
                        .HasName("PK_EducationalRoles");

                    b.ToTable("zEducationalRole");
                });

            modelBuilder.Entity("OLS.Models.ZFacultyType", b =>
                {
                    b.Property<Guid>("FacultyTypeId")
                        .HasColumnName("FacultyTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacultypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FacultypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("FacultyTypeId")
                        .HasName("PK_FacultyType");

                    b.ToTable("zFacultyType");
                });

            modelBuilder.Entity("OLS.Models.ZGenderType", b =>
                {
                    b.Property<Guid>("GenderTypeId")
                        .HasColumnName("GenderTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenderTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GenderTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("GenderTypeId")
                        .HasName("PK_GenderType");

                    b.ToTable("zGenderType");
                });

            modelBuilder.Entity("OLS.Models.ZLaboratoryMaterialType", b =>
                {
                    b.Property<Guid>("LaboratoryMaterialTypeId")
                        .HasColumnName("LaboratoryMaterialTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LaboratoryMaterialTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LaboratoryMaterialTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("LaboratoryMaterialTypeId")
                        .HasName("PK_zLaboratoryTypeID");

                    b.ToTable("zLaboratoryMaterialType");
                });

            modelBuilder.Entity("OLS.Models.ZOtherExpenseType", b =>
                {
                    b.Property<Guid>("OtherExpenseTypeId")
                        .HasColumnName("OtherExpenseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("OtherExpenseTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OtherExpenseTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OtherExpenseTypeId");

                    b.ToTable("zOtherExpenseType");
                });

            modelBuilder.Entity("OLS.Models.ZPartyRoleType", b =>
                {
                    b.Property<Guid>("PartyRoleTypeId")
                        .HasColumnName("PartyRoleTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("PartyRoleTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PartyRoleTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PartyRoleTypeId")
                        .HasName("PK_PatyRoleType");

                    b.ToTable("zPartyRoleType");
                });

            modelBuilder.Entity("OLS.Models.ZPayment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnName("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AmountInLetters")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("AmountInNumbers")
                        .HasColumnType("money");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("StatusTypeId")
                        .HasColumnName("StatusTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId")
                        .HasName("PK_Table_1");

                    b.HasIndex("StatusTypeId");

                    b.ToTable("zPayment");
                });

            modelBuilder.Entity("OLS.Models.ZProvince", b =>
                {
                    b.Property<Guid>("ProvinceId")
                        .HasColumnName("ProvinceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvNaDar")
                        .HasColumnName("PROV_NA_DAR")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProvNaEng")
                        .HasColumnName("PROV_NA_ENG")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ProvinceId")
                        .HasName("PK_zProvinces");

                    b.ToTable("zProvince");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolBussinessType", b =>
                {
                    b.Property<Guid>("SchoolBussinessTypeId")
                        .HasColumnName("SchoolBussinessTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BussinessTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BussinessTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("SchoolBussinessTypeId")
                        .HasName("PK_SchoolBussinessType");

                    b.ToTable("zSchoolBussinessType");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolGenderType", b =>
                {
                    b.Property<Guid>("SchoolGenderTypeId")
                        .HasColumnName("SchoolGenderTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SchoolGenderTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SchoolGenderTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolGenderTypeId");

                    b.ToTable("zSchoolGenderType");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolIndicator", b =>
                {
                    b.Property<Guid>("SchoolIndicatorId")
                        .HasColumnName("SchoolIndicatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IndicatorName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("SchoolIndicatorId");

                    b.ToTable("zSchoolIndicator");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolLevel", b =>
                {
                    b.Property<Guid>("SchoolLevelId")
                        .HasColumnName("SchoolLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("SchoolLevelName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SchoolLevelNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolLevelId")
                        .HasName("PK_SchoolLevel");

                    b.ToTable("zSchoolLevel");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolQualityLevel", b =>
                {
                    b.Property<Guid>("SchoolQualityLevelId")
                        .HasColumnName("SchoolQualityLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LevelNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolQualityLevelId")
                        .HasName("PK_SchoolQualityLevel");

                    b.ToTable("zSchoolQualityLevel");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolSubLevel", b =>
                {
                    b.Property<Guid>("SchoolSubLevelId")
                        .HasColumnName("SchoolSubLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("SchoolLevelId")
                        .HasColumnName("SchoolLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubLevelName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubLevelNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolSubLevelId")
                        .HasName("PK_SchoolSubLevel");

                    b.HasIndex("SchoolLevelId");

                    b.ToTable("zSchoolSubLevel");
                });

            modelBuilder.Entity("OLS.Models.ZStatusType", b =>
                {
                    b.Property<Guid>("StatusTypeId")
                        .HasColumnName("StatusTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StatusTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StatusTypeNameDari")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StatusTypeId");

                    b.ToTable("zStatusType");
                });

            modelBuilder.Entity("OLS.Models.ZVillageNahia", b =>
                {
                    b.Property<Guid>("VillageNahiaId")
                        .HasColumnName("VillageNahiaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AfgUid")
                        .HasColumnName("AFG_UID")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Center")
                        .HasColumnName("CENTER")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("CntrCode")
                        .HasColumnName("CNTR_CODE")
                        .HasColumnType("float");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnName("DistrictID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Elevation")
                        .HasColumnName("ELEVATION")
                        .HasColumnType("float");

                    b.Property<double?>("LangCode")
                        .HasColumnName("LANG_CODE")
                        .HasColumnType("float");

                    b.Property<string>("Language")
                        .HasColumnName("LANGUAGE_")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("LatY")
                        .HasColumnName("LAT_Y")
                        .HasColumnType("float");

                    b.Property<double?>("LonX")
                        .HasColumnName("LON_X")
                        .HasColumnType("float");

                    b.Property<string>("MistiDistCode")
                        .HasColumnName("MISTI_DIST_CODE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MistiProvCode")
                        .HasColumnName("MISTI_PROV_CODE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("Population")
                        .HasColumnName("POPULATION")
                        .HasColumnType("float");

                    b.Property<string>("VilUid")
                        .HasColumnName("VIL_UID")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VillageNameEng")
                        .HasColumnName("VILLAGE_NAME_ENG")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("VillageNahiaId")
                        .HasName("PK_zVillagesNahias");

                    b.HasIndex("DistrictId");

                    b.ToTable("zVillageNahia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OLS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OLS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OLS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.ApplicationStatus", b =>
                {
                    b.HasOne("OLS.Models.ZApplicationStatusType", "ApplicationStatusType")
                        .WithMany("ApplicationStatus")
                        .HasForeignKey("ApplicationStatusTypeId")
                        .HasConstraintName("FK_ApplicationStatus_zApplicationStatusType");

                    b.HasOne("OLS.Models.School", "School")
                        .WithMany("ApplicationStatus")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_ApplicationStatus_School");
                });

            modelBuilder.Entity("OLS.Models.ContactDetails", b =>
                {
                    b.HasOne("OLS.Models.ZContactMechanismType", "ContactMechanismType")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactMechanismTypeId")
                        .HasConstraintName("FK_ContactDetails_ContactMechanismType");

                    b.HasOne("OLS.Models.Party", "Party")
                        .WithMany("ContactDetails")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("FK_ContactDetails_Party")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.LicensePayment", b =>
                {
                    b.HasOne("OLS.Models.School", "School")
                        .WithOne("LicensePayment")
                        .HasForeignKey("OLS.Models.LicensePayment", "SchoolId")
                        .HasConstraintName("FK_LicensePayment_School")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.PartyAddress", b =>
                {
                    b.HasOne("OLS.Models.ZAddressType", "AddressType")
                        .WithMany("PartyAddress")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_PartyAddress_AddressType");

                    b.HasOne("OLS.Models.ZDistrict", "District")
                        .WithMany("PartyAddress")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_PartyAddress_zDistrict");

                    b.HasOne("OLS.Models.Party", "Party")
                        .WithMany("PartyAddress")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("FK_PartyAddress_Party")
                        .IsRequired();

                    b.HasOne("OLS.Models.ZProvince", "Province")
                        .WithMany("PartyAddress")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_PartyAddress_zProvince");

                    b.HasOne("OLS.Models.ZVillageNahia", "VillageNahia")
                        .WithMany("PartyAddress")
                        .HasForeignKey("VillageNahiaId")
                        .HasConstraintName("FK_PartyAddress_zVillageNahia");
                });

            modelBuilder.Entity("OLS.Models.PartyDocument", b =>
                {
                    b.HasOne("OLS.Models.ZDocCategory", "DocCategory")
                        .WithMany("PartyDocument")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("FK_PartyDocuments_DocCategory");

                    b.HasOne("OLS.Models.ZDocType", "DocType")
                        .WithMany("PartyDocument")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_PartyDocuments_DocType");

                    b.HasOne("OLS.Models.Party", "Party")
                        .WithOne("PartyDocument")
                        .HasForeignKey("OLS.Models.PartyDocument", "PartyId")
                        .HasConstraintName("FK_PartyDocuments_Party")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.Person", b =>
                {
                    b.HasOne("OLS.Models.ZGenderType", "GenderType")
                        .WithMany("Person")
                        .HasForeignKey("GenderTypeId")
                        .HasConstraintName("FK_Person_zGenderType");

                    b.HasOne("OLS.Models.ZPartyRoleType", "PartyRoleType")
                        .WithMany("Person")
                        .HasForeignKey("PartyRoleTypeId")
                        .HasConstraintName("FK_Person_PatyRoleType");

                    b.HasOne("OLS.Models.Party", "PersonNavigation")
                        .WithOne("Person")
                        .HasForeignKey("OLS.Models.Person", "PersonId")
                        .HasConstraintName("FK_Person_Party")
                        .IsRequired();

                    b.HasOne("OLS.Models.School", "School")
                        .WithMany("Person")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Person_School");
                });

            modelBuilder.Entity("OLS.Models.PersonEducation", b =>
                {
                    b.HasOne("OLS.Models.ZEducationLevel", "EducationLevel")
                        .WithMany("PersonEducation")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("FK_PartyEducation_EducationLevel");

                    b.HasOne("OLS.Models.ZFacultyType", "FacultyType")
                        .WithMany("PersonEducation")
                        .HasForeignKey("FacultyTypeId")
                        .HasConstraintName("FK_PersonEducation_FacultyType");

                    b.HasOne("OLS.Models.Person", "Person")
                        .WithMany("PersonEducation")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_PersonEducation_Person")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.School", b =>
                {
                    b.HasOne("OLS.Models.ZLaboratoryMaterialType", "LaboratoryMaterialType")
                        .WithMany("School")
                        .HasForeignKey("LaboratoryMaterialTypeId")
                        .HasConstraintName("FK_School_zLaboratoryTypeID");

                    b.HasOne("OLS.Models.ZSchoolGenderType", "SchoolGenderType")
                        .WithMany("School")
                        .HasForeignKey("SchoolGenderTypeId")
                        .HasConstraintName("FK_School_zSchoolGenderType");

                    b.HasOne("OLS.Models.Party", "SchoolNavigation")
                        .WithOne("School")
                        .HasForeignKey("OLS.Models.School", "SchoolId")
                        .HasConstraintName("FK_School_Party")
                        .IsRequired();

                    b.HasOne("OLS.Models.ZSchoolLevel", "SchoolLevel")
                        .WithMany("School")
                        .HasForeignKey("SchoolLevelId")
                        .HasConstraintName("FK_School_zSchoolLevel");
                });

            modelBuilder.Entity("OLS.Models.SchoolCheckList", b =>
                {
                    b.HasOne("OLS.Models.School", "School")
                        .WithMany("SchoolCheckList")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_SchoolCheckList_School");

                    b.HasOne("OLS.Models.ZSchoolIndicator", "SchoolIndicator")
                        .WithMany("SchoolCheckList")
                        .HasForeignKey("SchoolIndicatorId")
                        .HasConstraintName("FK_SchoolCheckList_zSchoolIndicator");

                    b.HasOne("OLS.Models.ZSchoolQualityLevel", "SchoolQualityLevel")
                        .WithMany("SchoolCheckList")
                        .HasForeignKey("SchoolQualityLevelId")
                        .HasConstraintName("FK_SchoolCheckList_SchoolQualityLevel");
                });

            modelBuilder.Entity("OLS.Models.SchoolFinancialResource", b =>
                {
                    b.HasOne("OLS.Models.ZSchoolBussinessType", "SchoolBussinessType")
                        .WithMany("SchoolFinancialResource")
                        .HasForeignKey("SchoolBussinessTypeId")
                        .HasConstraintName("FK_SchoolFinancialResource_SchoolBussinessType");

                    b.HasOne("OLS.Models.School", "School")
                        .WithOne("SchoolFinancialResource")
                        .HasForeignKey("OLS.Models.SchoolFinancialResource", "SchoolId")
                        .HasConstraintName("FK_SchoolFinancialResources_School")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.SchoolLicense", b =>
                {
                    b.HasOne("OLS.Models.School", "School")
                        .WithMany("SchoolLicense")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_SchoolLicense_School");
                });

            modelBuilder.Entity("OLS.Models.SchoolOtherExpenses", b =>
                {
                    b.HasOne("OLS.Models.ZOtherExpenseType", "OtherExpenseType")
                        .WithMany("SchoolOtherExpenses")
                        .HasForeignKey("OtherExpenseTypeId")
                        .HasConstraintName("FK_OtherExpenses_zOtherExpenseType");

                    b.HasOne("OLS.Models.School", "School")
                        .WithMany("SchoolOtherExpenses")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_OtherExpenses_School");
                });

            modelBuilder.Entity("OLS.Models.SchoolStaffExpenses", b =>
                {
                    b.HasOne("OLS.Models.School", "School")
                        .WithOne("SchoolStaffExpenses")
                        .HasForeignKey("OLS.Models.SchoolStaffExpenses", "SchoolId")
                        .HasConstraintName("FK_SchoolFinancialPlan_School")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.StaffFinancialPlan", b =>
                {
                    b.HasOne("OLS.Models.ZPartyRoleType", "PartyRoleType")
                        .WithMany("StaffFinancialPlan")
                        .HasForeignKey("PartyRoleTypeId")
                        .HasConstraintName("FK_StaffFinancialPlan_zPatyRoleType");

                    b.HasOne("OLS.Models.School", "School")
                        .WithOne("StaffFinancialPlan")
                        .HasForeignKey("OLS.Models.StaffFinancialPlan", "SchoolId")
                        .HasConstraintName("FK_StaffFinancialPlan_School")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.StudentEnrollmentPlan", b =>
                {
                    b.HasOne("OLS.Models.ZGenderType", "GenderType")
                        .WithMany("StudentEnrollmentPlan")
                        .HasForeignKey("GenderTypeId")
                        .HasConstraintName("FK_StudentEnrollmentPlan_GenderType");

                    b.HasOne("OLS.Models.School", "School")
                        .WithOne("StudentEnrollmentPlan")
                        .HasForeignKey("OLS.Models.StudentEnrollmentPlan", "SchoolId")
                        .HasConstraintName("FK_StudentEnrollmentPlan_School")
                        .IsRequired();

                    b.HasOne("OLS.Models.ZSchoolSubLevel", "SchoolSubLevel")
                        .WithMany("StudentEnrollmentPlan")
                        .HasForeignKey("SchoolSubLevelId")
                        .HasConstraintName("FK_StudentEnrollmentPlan_SchoolSubLevel");
                });

            modelBuilder.Entity("OLS.Models.ZDistrict", b =>
                {
                    b.HasOne("OLS.Models.ZProvince", "Province")
                        .WithMany("ZDistrict")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_zDistrict_zProvince");
                });

            modelBuilder.Entity("OLS.Models.ZDocType", b =>
                {
                    b.HasOne("OLS.Models.ZDocCategory", "DocCategory")
                        .WithMany("ZDocType")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("FK_DocType_DocCategory");
                });

            modelBuilder.Entity("OLS.Models.ZEducationalRole", b =>
                {
                    b.HasOne("OLS.Models.ZPartyRoleType", "PartyRoleType")
                        .WithOne("ZEducationalRole")
                        .HasForeignKey("OLS.Models.ZEducationalRole", "PartyRoleTypeId")
                        .HasConstraintName("FK_EducationalRoles_PatyRoleType")
                        .IsRequired();
                });

            modelBuilder.Entity("OLS.Models.ZPayment", b =>
                {
                    b.HasOne("OLS.Models.ZStatusType", "StatusType")
                        .WithMany("ZPayment")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_zAmountPayable_zStatusType");
                });

            modelBuilder.Entity("OLS.Models.ZSchoolSubLevel", b =>
                {
                    b.HasOne("OLS.Models.ZSchoolLevel", "SchoolLevel")
                        .WithMany("ZSchoolSubLevel")
                        .HasForeignKey("SchoolLevelId")
                        .HasConstraintName("FK_SchoolSubLevel_SchoolLevel");
                });

            modelBuilder.Entity("OLS.Models.ZVillageNahia", b =>
                {
                    b.HasOne("OLS.Models.ZDistrict", "District")
                        .WithMany("ZVillageNahia")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_zVillageNahia_zDistrict");
                });
#pragma warning restore 612, 618
        }
    }
}
